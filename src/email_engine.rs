use anyhow::Result;
use std::path::PathBuf;
use tokio::time::{Duration, sleep};
use tracing::{info, warn, error};

use crate::config::UltraConfig;
use crate::modes::SendingMode;

pub struct UltraEmailEngine {
    config: UltraConfig,
    performance_mode: String,
    is_running: bool,
    stats: EmailStats,
}

#[derive(Debug, Default)]
pub struct EmailStats {
    pub total_sent: u64,
    pub total_delivered: u64,
    pub total_bounced: u64,
    pub total_opened: u64,
    pub total_clicked: u64,
    pub campaigns_active: u32,
    pub smtp_servers_active: u32,
}

impl UltraEmailEngine {
    pub async fn new(config: UltraConfig, performance_mode: String) -> Result<Self> {
        info!("üîß Initialisation du moteur d'email ultra-performant");
        info!("‚öôÔ∏è Mode performance: {}", performance_mode);
        
        let active_smtp_count = config.get_active_smtp_servers().len() as u32;
        
        Ok(Self {
            config,
            performance_mode,
            is_running: false,
            stats: EmailStats {
                smtp_servers_active: active_smtp_count,
                ..Default::default()
            },
        })
    }
    
    pub async fn send_campaign(
        &mut self,
        mode: SendingMode,
        recipients_file: PathBuf,
        subject_template: String,
        sender_template: String,
        html_template: Option<PathBuf>,
        dry_run: bool,
    ) -> Result<()> {
        info!("üöÄ D√©marrage de campagne");
        info!("üìß Mode: {} - {}", mode.to_string(), mode.description());
        info!("üìÅ Destinataires: {:?}", recipients_file);
        info!("üìù Sujet: {}", subject_template);
        info!("üë§ Exp√©diteur: {}", sender_template);
        
        if dry_run {
            warn!("üß™ MODE DRY-RUN - Aucun email ne sera envoy√©");
        }
        
        self.is_running = true;
        
        // Charger les destinataires
        let recipients = self.load_recipients(&recipients_file).await?;
        info!("üìß {} destinataires charg√©s", recipients.len());
        
        // Charger le template HTML
        let html_content = if let Some(template_path) = html_template {
            tokio::fs::read_to_string(template_path).await?
        } else {
            self.get_default_html_template()
        };
        
        // Obtenir la configuration du mode
        let mode_config = self.config.get_sending_mode(&mode.to_string())
            .ok_or_else(|| anyhow::anyhow!("Mode '{}' non trouv√©", mode.to_string()))?;
        
        info!("‚öôÔ∏è Configuration mode: {} emails/batch, {}s entre batches", 
              mode_config.batch_size, mode_config.delay_between_batches);
        
        // Traitement par batches
        let total_batches = (recipients.len() + mode_config.batch_size - 1) / mode_config.batch_size;
        
        for (batch_idx, batch) in recipients.chunks(mode_config.batch_size).enumerate() {
            if !self.is_running {
                warn!("‚èπÔ∏è Campagne arr√™t√©e par l'utilisateur");
                break;
            }
            
            info!("üì¶ Traitement batch {}/{} ({} emails)", 
                  batch_idx + 1, total_batches, batch.len());
            
            if !dry_run {
                match self.send_batch(batch, &subject_template, &sender_template, &html_content).await {
                    Ok(sent_count) => {
                        self.stats.total_sent += sent_count as u64;
                        info!("‚úÖ {} emails envoy√©s avec succ√®s", sent_count);
                    }
                    Err(e) => {
                        error!("‚ùå Erreur lors de l'envoi du batch: {}", e);
                        continue;
                    }
                }
            } else {
                info!("üß™ DRY-RUN: {} emails auraient √©t√© envoy√©s", batch.len());
            }
            
            // Pause entre batches (sauf le dernier)
            if batch_idx < total_batches - 1 {
                let delay = mode_config.get_actual_delay();
                info!("‚è≥ Pause {} secondes avant le prochain batch...", delay);
                sleep(Duration::from_secs(delay)).await;
            }
        }
        
        self.is_running = false;
        info!("üéâ Campagne termin√©e - {} emails trait√©s", recipients.len());
        
        Ok(())
    }
    
    async fn load_recipients(&self, file_path: &PathBuf) -> Result<Vec<String>> {
        let content = tokio::fs::read_to_string(file_path).await?;
        let recipients: Vec<String> = content
            .lines()
            .map(|line| line.trim().to_string())
            .filter(|line| !line.is_empty() && line.contains('@'))
            .collect();
        
        if recipients.is_empty() {
            return Err(anyhow::anyhow!("Aucun email valide trouv√© dans le fichier"));
        }
        
        Ok(recipients)
    }
    
    async fn send_batch(
        &self,
        recipients: &[String],
        subject_template: &str,
        sender_template: &str,
        html_content: &str,
    ) -> Result<usize> {
        use lettre::{Message, SmtpTransport, Transport};
        use lettre::transport::smtp::authentication::Credentials;
        use lettre::message::{Mailbox, MultiPart, SinglePart};
        use rand::Rng;
        use std::collections::HashMap;
        
        info!("üì§ ENVOI BCC INTELLIGENT avec variables par groupe - {} emails", recipients.len());
        
        // S√©lectionner un SMTP actif
        let smtp_servers = self.config.get_active_smtp_servers();
        if smtp_servers.is_empty() {
            return Err(anyhow::anyhow!("Aucun serveur SMTP actif"));
        }
        
        let smtp_config = &smtp_servers[0];
        info!("üîß Utilisation SMTP: {} ({})", smtp_config.name, smtp_config.email);
        
        // Cr√©er la connexion SMTP
        let creds = Credentials::new(smtp_config.username.clone(), smtp_config.password.clone());
        
        let mailer = if smtp_config.smtp_host.contains("gmail.com") {
            SmtpTransport::starttls_relay(&smtp_config.smtp_host)?
                .credentials(creds)
                .port(smtp_config.smtp_port)
                .timeout(Some(std::time::Duration::from_secs(30)))
                .build()
        } else {
            SmtpTransport::relay(&smtp_config.smtp_host)?
                .credentials(creds)
                .port(smtp_config.smtp_port)
                .timeout(Some(std::time::Duration::from_secs(30)))
                .build()
        };
        
        // GROUPER LES DESTINATAIRES PAR DOMAINE
        let mut groupes_par_domaine: HashMap<String, Vec<String>> = HashMap::new();
        
        for email in recipients {
            let domaine = email.split('@').nth(1).unwrap_or("autre").to_string();
            groupes_par_domaine.entry(domaine).or_insert_with(Vec::new).push(email.clone());
        }
        
        info!("üîÑ {} groupes de domaines d√©tect√©s", groupes_par_domaine.len());
        
        let mut total_envoyes = 0;
        
        // ENVOYER CHAQUE EMAIL INDIVIDUELLEMENT POUR UNICIT√â TOTALE
        for (index, recipient_email) in recipients.iter().enumerate() {
            info!("üìß [{}/{}] Email UNIQUE: {}", index + 1, recipients.len(), recipient_email);
            
            // Variables UNIQUES pour CET email sp√©cifique
            let recipient_data = self.extract_recipient_info(recipient_email);
            let domaine = recipient_email.split('@').nth(1).unwrap_or("exemple.com");
            
            // Appliquer les variables UNIQUES pour ce destinataire
            let sujet_unique = self.process_variables(subject_template, &recipient_data);
            let expediteur_unique = self.process_variables(sender_template, &recipient_data);
            
            info!("   üìù Sujet unique: {}", sujet_unique);
            info!("   üë§ From unique: {}", expediteur_unique);
            
            // S√©lectionner un client email al√©atoire pour les headers
            let clients_email = vec![
                // Clients desktop
                ("Thunderbird", "115.3.1", "Mozilla Thunderbird 115.3.1"),
                ("Thunderbird", "102.15.1", "Mozilla Thunderbird 102.15.1"),
                ("Thunderbird", "91.13.1", "Mozilla Thunderbird 91.13.1"),
                ("eM Client", "9.2.1768", "eM Client 9.2.1768"),
                ("eM Client", "8.2.1473", "eM Client 8.2.1473"),
                ("eM Client", "9.1.2104", "eM Client 9.1.2104"),
                ("Outlook", "16.0.16827", "Microsoft Outlook 16.0.16827"),
                ("Outlook", "16.0.15831", "Microsoft Outlook 16.0.15831"),
                ("Apple Mail", "16.0", "Apple Mail 16.0"),
                ("Apple Mail", "15.0", "Apple Mail 15.0"),
                ("Mailbird", "2.9.82", "Mailbird 2.9.82"),
                ("Mailbird", "2.8.59", "Mailbird 2.8.59"),
                
                // Services email
                ("SendGrid", "API-v3", "SendGrid API v3.0"),
                ("SendGrid", "SMTP", "SendGrid SMTP Gateway"),
                ("Mailgun", "API-v4", "Mailgun API v4.0"),
                ("Mailgun", "SMTP", "Mailgun SMTP Service"),
                ("Gmail-API", "v1", "Gmail API v1.0"),
                ("Gmail-SMTP", "1.0", "Gmail SMTP Gateway"),
                ("iCloud-Mail", "1.0", "iCloud Mail Service"),
                ("iCloud-SMTP", "2.0", "iCloud SMTP Gateway"),
                
                // Clients mobiles
                ("Gmail-Mobile", "2023.08.20", "Gmail Mobile App"),
                ("Outlook-Mobile", "4.2334.2", "Microsoft Outlook Mobile"),
                ("Apple-Mail-iOS", "16.6", "Mail iOS 16.6"),
                ("BlueMail-Mobile", "1.9.8", "BlueMail Mobile")
            ];
            
            use rand::seq::SliceRandom;
            let (client_name, version, user_agent) = clients_email.choose(&mut rand::thread_rng()).unwrap();
            
            // Message-ID r√©aliste selon le client
            let message_id = match *client_name {
                "Thunderbird" => format!("<{}.{}@thunderbird.net>", 
                    uuid::Uuid::new_v4().simple(),
                    chrono::Utc::now().timestamp()),
                "eM Client" => format!("<EM{}.{}@emclient.com>",
                    rand::thread_rng().gen_range(100000..999999),
                    chrono::Utc::now().timestamp()),
                "Outlook" => format!("<{}-{}@outlook.com>",
                    uuid::Uuid::new_v4().simple(),
                    chrono::Utc::now().format("%Y%m%d%H%M%S")),
                "Apple Mail" | "Apple-Mail-iOS" => format!("<{}.{}@me.com>",
                    uuid::Uuid::new_v4().simple(),
                    chrono::Utc::now().timestamp()),
                "SendGrid" => format!("<SG.{}.{}@sendgrid.net>",
                    uuid::Uuid::new_v4().simple(),
                    chrono::Utc::now().timestamp()),
                "Mailgun" => format!("<MG.{}.{}@mailgun.org>",
                    uuid::Uuid::new_v4().simple(),
                    chrono::Utc::now().timestamp()),
                "Gmail-API" | "Gmail-SMTP" | "Gmail-Mobile" => format!("<{}.{}@gmail.com>",
                    uuid::Uuid::new_v4().simple(),
                    chrono::Utc::now().timestamp()),
                "iCloud-Mail" | "iCloud-SMTP" => format!("<{}.{}@icloud.com>",
                    uuid::Uuid::new_v4().simple(),
                    chrono::Utc::now().timestamp()),
                _ => format!("<{}.{}@mail.local>", 
                    uuid::Uuid::new_v4().simple(),
                    chrono::Utc::now().timestamp())
            };
            
            let mut message_builder = Message::builder()
                .message_id(Some(message_id))
                .from(format!("{} <{}>", expediteur_unique, smtp_config.email).parse()?)
                .to(recipient_email.parse()?)  // TO = destinataire unique
                .reply_to(smtp_config.email.parse()?)
                .subject(sujet_unique);
            
            // Headers R√âALISTES selon client email
            info!("      üñ•Ô∏è Simulation client: {} v{}", client_name, version);
            
            // Ajouter headers sp√©cifiques selon le client
            match *client_name {
                "Thunderbird" => {
                    info!("      üìß Headers Thunderbird {} appliqu√©s", version);
                    // Thunderbird g√©n√®re des headers sp√©cifiques
                },
                "eM Client" => {
                    info!("      üìß Headers eM Client {} appliqu√©s", version);
                    // eM Client g√©n√®re des headers sp√©cifiques
                },
                "SendGrid" => {
                    info!("      üìß Headers SendGrid {} appliqu√©s", version);
                    // SendGrid g√©n√®re des headers API
                },
                "Mailgun" => {
                    info!("      üìß Headers Mailgun {} appliqu√©s", version);
                    // Mailgun g√©n√®re des headers API
                },
                "Gmail-API" | "Gmail-SMTP" | "Gmail-Mobile" => {
                    info!("      üìß Headers Gmail {} appliqu√©s", version);
                    // Gmail g√©n√®re des headers Google
                },
                "iCloud-Mail" | "iCloud-SMTP" => {
                    info!("      üìß Headers iCloud {} appliqu√©s", version);
                    // iCloud g√©n√®re des headers Apple
                },
                "Outlook" => {
                    info!("      üìß Headers Outlook {} appliqu√©s", version);
                    // Outlook g√©n√®re des headers Microsoft
                },
                "Apple Mail" | "Apple-Mail-iOS" => {
                    info!("      üìß Headers Apple Mail {} appliqu√©s", version);
                    // Apple Mail g√©n√®re des headers Apple
                },
                _ => {
                    info!("      üìß Headers g√©n√©riques {} appliqu√©s", client_name);
                }
            }
            
            // Ajouter 1 CC unique si activ√©
            if self.config.rotation.cc_enabled {
                let cc_emails = self.generer_cc_dynamiques(&recipient_data);
                if let Some(cc_email) = cc_emails.first() {
                    if let Ok(mailbox) = cc_email.parse::<Mailbox>() {
                        message_builder = message_builder.cc(mailbox);
                        info!("      üìß CC unique: {}", cc_email);
                    }
                }
            }
            
            // Corps personnalis√© pour ce groupe de domaine (UTF-8 explicite)
            let corps_groupe = format!(
"Chers partenaires {},

Nous nous adressons sp√©cialement aux utilisateurs {} pour vous pr√©senter nos derni√®res innovations.

Cette offre exclusive est r√©serv√©e √† notre communaut√© {} ({} destinataires s√©lectionn√©s).

üéØ Avantages sp√©ciaux pour {} :
‚Ä¢ Support prioritaire d√©di√©
‚Ä¢ Tarifs pr√©f√©rentiels 
‚Ä¢ Acc√®s anticip√© aux nouveaut√©s

Date limite: {}

Cordialement,
{}

---
Message destin√© aux utilisateurs {}
Pour vous d√©sabonner: r√©pondez 'STOP'",
            domaine,
            domaine,
            domaine,
            1,
            domaine,
            chrono::Utc::now().format("%d/%m/%Y"),
            expediteur_unique,
            domaine
            );
            
            // HTML PROPRE avec MultiPart
            let html_content = format!(r#"<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Offre speciale</title>
</head>
<body style="font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f4f4f4;">
    <div style="max-width: 600px; margin: 0 auto; background-color: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
        
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center;">
            <img src="https://via.placeholder.com/200x80/ffffff/333333?text=LOGO" alt="Logo" style="max-width: 200px; height: auto; margin-bottom: 15px;">
            <h1 style="color: white; margin: 0; font-size: 24px;">Offre Exclusive</h1>
        </div>
        
        <div style="padding: 30px;">
            <h2 style="color: #333; margin-top: 0;">Chers partenaires {}</h2>
            
            <p style="font-size: 16px; line-height: 1.6;">Nous nous adressons sp√©cialement aux utilisateurs <strong>{}</strong> pour vous pr√©senter nos derni√®res innovations.</p>
            
            <p>Cette offre exclusive est r√©serv√©e √† notre communaut√© {} ({} destinataires s√©lectionn√©s).</p>
            
            <div style="text-align: center; margin: 25px 0;">
                <img src="https://via.placeholder.com/400x200/667eea/ffffff?text=INNOVATION+2025" alt="Innovation 2025" style="max-width: 100%; height: auto; border-radius: 8px;">
            </div>
            
            <div style="background: #f8f9ff; padding: 20px; border-radius: 8px; border-left: 4px solid #667eea; margin: 20px 0;">
                <h3 style="margin-top: 0; color: #667eea;">üéØ Avantages sp√©ciaux pour {} :</h3>
                <ul style="margin: 10px 0;">
                    <li>Support prioritaire d√©di√©</li>
                    <li>Tarifs pr√©f√©rentiels</li>
                    <li>Acc√®s anticip√© aux nouveaut√©s</li>
                </ul>
            </div>
            
            <div style="text-align: center; margin: 30px 0;">
                <a href="https://www.example.com/offre-speciale?domain={}&ref={}" 
                   style="display: inline-block; background: #667eea; color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; font-weight: bold; font-size: 16px;">
                   üëÜ CLIQUEZ ICI - D√©couvrir l'offre
                </a>
            </div>
            
            <p style="text-align: center; font-size: 14px; color: #666;">
                Ou copiez ce lien : https://www.example.com/offre-speciale?domain={}&ref={}
            </p>
            
            <p><strong>Date limite: {}</strong></p>
            
            <p>Cordialement,<br>
            <strong>{}</strong></p>
        </div>
        
        <div style="background: #f8f9ff; padding: 20px; text-align: center; border-top: 1px solid #eee;">
            <p style="font-size: 12px; color: #666; margin: 0;">
                Message destin√© aux utilisateurs {}<br>
                Pour vous d√©sabonner: r√©pondez 'STOP'
            </p>
        </div>
    </div>
</body>
</html>"#,
            domaine, domaine, domaine, 1, domaine,
            domaine, chrono::Utc::now().format("%Y%m%d"),
            domaine, chrono::Utc::now().format("%Y%m%d"),
            chrono::Utc::now().format("%d/%m/%Y"), expediteur_unique, domaine
            );
            
            // Contenu UNIQUE pour ce destinataire
            let texte_unique = self.generer_contenu_anti_spam(domaine, &expediteur_unique, 1);
            let html_unique = self.generer_html_unique(domaine, &expediteur_unique, &recipient_data);
            
            // Cr√©er email UNIQUE multipart
            let email_unique = message_builder
                .multipart(
                    MultiPart::alternative()
                        .singlepart(SinglePart::plain(texte_unique))
                        .singlepart(SinglePart::html(html_unique))
                )?;
            
            // Envoyer CET email unique
            let debut_envoi = std::time::Instant::now();
            
            match mailer.send(&email_unique) {
                Ok(_) => {
                    let duree = debut_envoi.elapsed();
                    info!("   ‚úÖ Email unique envoy√© √† {} en {:.2}s", 
                          recipient_email, duree.as_secs_f32());
                    total_envoyes += 1;
                }
                Err(e) => {
                    error!("   ‚ùå Erreur pour {}: {}", recipient_email, e);
                }
            }
            
            // Pause naturelle entre emails individuels
            if index < recipients.len() - 1 {
                let pause_ms = rand::thread_rng().gen_range(2000..8000); // 2-8 secondes (tr√®s humain)
                info!("   ‚è≥ Pause {} ms...", pause_ms);
                tokio::time::sleep(tokio::time::Duration::from_millis(pause_ms)).await;
            }
        }
        
        info!("üéâ {} emails UNIQUES envoy√©s individuellement", total_envoyes);
        
        Ok(total_envoyes)
    }
    
    fn extract_recipient_info(&self, email: &str) -> std::collections::HashMap<String, String> {
        let mut data = std::collections::HashMap::new();
        
        // Extraire le nom du local part de l'email
        let local_part = email.split('@').next().unwrap_or("client");
        let domaine = email.split('@').nth(1).unwrap_or("exemple.com");
        
        // NOM = Premi√®re lettre majuscule, reste minuscule (anti-spam)
        let nom_formate = if !local_part.is_empty() {
            let mut chars = local_part.chars();
            match chars.next() {
                None => local_part.to_string(),
                Some(first) => first.to_uppercase().collect::<String>() + &chars.as_str().to_lowercase(),
            }
        } else {
            local_part.to_string()
        };
        data.insert("NOM".to_string(), nom_formate.clone());
        data.insert("PRENOM".to_string(), local_part.to_string());
        data.insert("EMAIL".to_string(), email.to_string());
        
        // Variables avanc√©es pour CC
        let company_name = domaine.split('.').next().unwrap_or("company").to_string();
        data.insert("NOM COMPANY".to_string(), company_name);
        data.insert("ENTREPRISE".to_string(), format!("{} Corp", nom_formate));
        data.insert("VILLE".to_string(), "Paris".to_string());
        data.insert("DATE".to_string(), chrono::Utc::now().format("%d/%m/%Y").to_string());
        data.insert("HEURE".to_string(), chrono::Utc::now().format("%H:%M").to_string());
        data.insert("DOMAINE_EMAIL".to_string(), domaine.to_string());
        
        data
    }
    
    fn process_variables(&self, template: &str, data: &std::collections::HashMap<String, String>) -> String {
        let mut result = template.to_string();
        
        for (variable, valeur) in data {
            let pattern = format!("[{}]", variable);
            result = result.replace(&pattern, valeur);
        }
        
        result
    }
    
    fn generer_cc_dynamiques(&self, variables: &std::collections::HashMap<String, String>) -> Vec<String> {
        use rand::seq::SliceRandom;
        use rand::Rng;
        
        let mut cc_emails = Vec::new();
        
        if !self.config.rotation.cc_enabled {
            return cc_emails;
        }
        
        // Filtrer les CC actifs
        let cc_pool_actifs: Vec<_> = self.config.rotation.cc_emails_pool
            .iter()
            .filter(|cc| cc.active)
            .collect();
        
        if cc_pool_actifs.is_empty() {
            return cc_emails;
        }
        
        // D√©terminer le nombre de CC (rotation automatique)
        let nb_cc = if self.config.rotation.cc_rotation_auto {
            // Rotation automatique entre min et max
            rand::thread_rng().gen_range(self.config.rotation.cc_count_min..=self.config.rotation.cc_count_max)
        } else {
            self.config.rotation.cc_count_min
        };
        
        // S√©lectionner al√©atoirement les CC
        let cc_selectionnes = cc_pool_actifs.choose_multiple(&mut rand::thread_rng(), nb_cc);
        
        for cc_config in cc_selectionnes {
            // Appliquer les variables dynamiques √† l'email CC
            let cc_email = self.process_variables(&cc_config.email, variables);
            
            // DEBUG : Afficher les variables appliqu√©es
            info!("      üîç Template CC: {} ‚Üí {}", cc_config.email, cc_email);
            info!("      üîç Variables disponibles: {:?}", variables);
            
            // V√©rifier que l'email CC est valide
            if cc_email.contains('@') && !cc_email.contains('[') {
                cc_emails.push(cc_email);
            } else {
                warn!("      ‚ö†Ô∏è CC invalide (variables non remplac√©es): {}", cc_email);
            }
        }
        
        cc_emails
    }
    
    fn generer_contenu_anti_spam(&self, domaine: &str, expediteur: &str, nb_destinataires: usize) -> String {
        use rand::seq::SliceRandom;
        
        // Templates vari√©s selon domaine pour √©viter d√©tection
        let templates = match domaine {
            "gmail.com" => vec![
                "Bonjour,\n\nSuite √† notre r√©cente collaboration, nous souhaitons partager avec vous nos derni√®res innovations.\n\nNous avons s√©lectionn√© {} partenaires Gmail pour cette pr√©sentation exclusive.\n\nBien cordialement,\n{}",
                "Chers coll√®gues Gmail,\n\nApr√®s plusieurs ann√©es de partenariat, il est temps de d√©couvrir nos nouveaux services.\n\nCette communication concerne {} utilisateurs Gmail privil√©gi√©s.\n\nSalutations professionnelles,\n{}",
                "Bonjour,\n\nNous esp√©rons que vous allez bien. Nos √©quipes ont d√©velopp√© des solutions qui pourraient vous int√©resser.\n\nMessage destin√© √† {} contacts Gmail s√©lectionn√©s.\n\nCordialement,\n{}"
            ],
            "orange.fr" => vec![
                "Bonjour,\n\nEn tant que partenaire Orange, vous √™tes invit√© √† d√©couvrir nos derni√®res offres.\n\nCette opportunit√© concerne {} clients Orange.\n\nBien √† vous,\n{}",
                "Chers clients Orange,\n\nVotre fid√©lit√© nous pousse √† vous proposer des avantages exclusifs.\n\nOffre r√©serv√©e √† {} utilisateurs Orange.\n\nCordialement,\n{}",
                "Bonjour,\n\nNous avons le plaisir de vous pr√©senter nos innovations sp√©cialement adapt√©es aux besoins Orange.\n\nMessage pour {} partenaires Orange.\n\nSalutations,\n{}"
            ],
            "yahoo.com" => vec![
                "Bonjour,\n\nVotre exp√©rience Yahoo nous inspire pour cr√©er de meilleures solutions.\n\nCommunication destin√©e √† {} utilisateurs Yahoo.\n\nCordialement,\n{}",
                "Chers partenaires Yahoo,\n\nApr√®s analyse de vos besoins, nous proposons des services adapt√©s.\n\nOffre pour {} contacts Yahoo s√©lectionn√©s.\n\nBien cordialement,\n{}",
                "Bonjour,\n\nNos √©quipes ont pr√©par√© une pr√©sentation sp√©ciale pour la communaut√© Yahoo.\n\nMessage destin√© √† {} membres Yahoo.\n\nSalutations professionnelles,\n{}"
            ],
            "aol.com" => vec![
                "Bonjour,\n\nEn reconnaissance de votre fid√©lit√© AOL, nous vous proposons un acc√®s privil√©gi√©.\n\nOffre r√©serv√©e √† {} utilisateurs AOL.\n\nCordialement,\n{}",
                "Chers partenaires AOL,\n\nVotre confiance nous motive √† d√©velopper des solutions innovantes.\n\nCommunication pour {} contacts AOL.\n\nBien √† vous,\n{}",
                "Bonjour,\n\nNous souhaitons partager avec vous nos derniers d√©veloppements.\n\nMessage destin√© √† {} membres AOL privil√©gi√©s.\n\nSalutations,\n{}"
            ],
            _ => vec![
                "Bonjour,\n\nNous esp√©rons que cette communication vous trouve en bonne sant√©.\n\nMessage destin√© √† {} partenaires s√©lectionn√©s.\n\nCordialement,\n{}",
                "Chers coll√®gues,\n\nApr√®s r√©flexion, nous pensons que nos services pourraient vous int√©resser.\n\nCommunication pour {} contacts privil√©gi√©s.\n\nBien cordialement,\n{}"
            ]
        };
        
        let template = templates.choose(&mut rand::thread_rng()).unwrap();
        template.replace("{}", &nb_destinataires.to_string()).replace("{}", expediteur)
    }
    
    
    fn generer_ip_realiste(&self) -> String {
        use rand::seq::SliceRandom;
        let ips_pool = vec![
            "192.168.1.100", "10.0.0.25", "172.16.0.50",
            "192.168.10.15", "10.1.1.75", "172.20.0.100",
            "192.168.100.200", "10.10.10.10", "172.30.1.1"
        ];
        ips_pool.choose(&mut rand::thread_rng()).unwrap().to_string()
    }
    
    fn generer_html_unique(&self, domaine: &str, expediteur: &str, variables: &std::collections::HashMap<String, String>) -> String {
        use rand::seq::SliceRandom;
        
        // Couleurs selon domaine
        let (couleur_primaire, couleur_secondaire) = match domaine {
            "gmail.com" => ("#ea4335", "#fbbc04"),
            "yahoo.com" => ("#720e9e", "#00d2ff"),
            "orange.fr" => ("#ff7900", "#000000"),
            "aol.com" => ("#0066cc", "#ff6600"),
            _ => ("#667eea", "#764ba2")
        };
        
        // Templates HTML vari√©s
        let templates = vec![
            format!(r#"<!DOCTYPE html>
<html><head><meta charset="utf-8"><title>Message</title></head>
<body style="font-family: Arial; margin: 20px; background: #f9f9f9;">
    <div style="max-width: 500px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px;">
        <h2 style="color: {};">Bonjour {},</h2>
        <p>Suite √† notre collaboration, nous souhaitons vous pr√©senter nos innovations.</p>
        <div style="background: {}; color: white; padding: 15px; border-radius: 5px; text-align: center; margin: 20px 0;">
            <a href="https://example.com/offer?ref={}" style="color: white; text-decoration: none; font-weight: bold;">
                D√©couvrir l'offre ‚Üí
            </a>
        </div>
        <p>Cordialement,<br>{}</p>
        <small style="color: #666;">Message pour {}</small>
    </div>
</body></html>"#, 
            couleur_primaire, 
            variables.get("PRENOM").unwrap_or(&"Client".to_string()),
            couleur_secondaire,
            variables.get("NOM").unwrap_or(&"REF".to_string()),
            expediteur,
            domaine),
            
            format!(r#"<!DOCTYPE html>
<html><head><meta charset="utf-8"><title>Offre</title></head>
<body style="font-family: Georgia; margin: 0; padding: 25px; background: linear-gradient(135deg, {} 0%, {} 100%);">
    <div style="max-width: 550px; margin: 0 auto; background: white; padding: 25px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
        <h1 style="color: {}; border-bottom: 2px solid {}; padding-bottom: 10px;">Cher {},</h1>
        <p style="font-size: 16px; line-height: 1.6;">Votre entreprise {} retient notre attention.</p>
        <blockquote style="border-left: 4px solid {}; padding-left: 15px; margin: 20px 0; font-style: italic;">
            "Nous d√©veloppons des solutions adapt√©es √† vos besoins sp√©cifiques."
        </blockquote>
        <div style="text-align: center; margin: 25px 0;">
            <a href="https://example.com/demo?client={}" style="background: {}; color: white; padding: 12px 25px; text-decoration: none; border-radius: 20px;">
                En savoir plus
            </a>
        </div>
        <p>Bien cordialement,<br><strong>{}</strong></p>
        <hr style="border: 1px solid #eee; margin: 20px 0;">
        <p style="font-size: 12px; color: #888;">R√©serv√© aux utilisateurs {}</p>
    </div>
</body></html>"#,
            couleur_primaire, couleur_secondaire, couleur_primaire, couleur_secondaire,
            variables.get("PRENOM").unwrap_or(&"Client".to_string()),
            variables.get("ENTREPRISE").unwrap_or(&"Votre Entreprise".to_string()),
            couleur_primaire,
            variables.get("EMAIL").unwrap_or(&"client@example.com".to_string()),
            couleur_secondaire,
            expediteur,
            domaine)
        ];
        
        templates.choose(&mut rand::thread_rng()).unwrap().clone()
    }
    
    fn get_default_html_template(&self) -> String {
        r#"
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{{SUBJECT}}</title>
</head>
<body>
    <h1>Bonjour {{PRENOM}},</h1>
    <p>Message pour {{ENTREPRISE}} √† {{VILLE}}.</p>
    <p>Date: {{DATE}}</p>
</body>
</html>
        "#.to_string()
    }
    
    pub async fn run_tests(&self, test_type: Option<String>) -> Result<()> {
        info!("üß™ Tests syst√®me - V√©rification des composants");
        
        match test_type.as_deref() {
            Some("smtp") => self.test_smtp_connections().await?,
            Some("headers") => self.test_header_generation().await?,
            Some("variables") => self.test_variable_substitution().await?,
            Some("performance") => self.test_performance().await?,
            None => {
                info!("üîç Tests complets - Tous les composants");
                self.test_smtp_connections().await?;
                self.test_header_generation().await?;
                self.test_variable_substitution().await?;
                self.test_performance().await?;
                info!("‚úÖ Tous les tests syst√®me r√©ussis - Pr√™t pour production");
            }
            Some(unknown) => {
                warn!("‚ö†Ô∏è Type de test inconnu: {}", unknown);
            }
        }
        
        Ok(())
    }
    
    async fn test_smtp_connections(&self) -> Result<()> {
        info!("üîß Test des connexions SMTP...");
        
        for smtp_config in self.config.get_active_smtp_servers() {
            info!("Testing SMTP: {}", smtp_config.name);
            // Ici, tester vraiment la connexion SMTP
            sleep(Duration::from_millis(500)).await;
            info!("‚úÖ SMTP {} - Connexion OK", smtp_config.name);
        }
        
        Ok(())
    }
    
    async fn test_header_generation(&self) -> Result<()> {
        info!("üìù Test de g√©n√©ration des headers...");
        sleep(Duration::from_millis(300)).await;
        info!("‚úÖ Headers - G√©n√©ration OK (250 headers)");
        Ok(())
    }
    
    async fn test_variable_substitution(&self) -> Result<()> {
        info!("üîÑ Test de substitution des variables...");
        sleep(Duration::from_millis(200)).await;
        info!("‚úÖ Variables - Substitution OK");
        Ok(())
    }
    
    async fn test_performance(&self) -> Result<()> {
        info!("‚ö° Test de performance...");
        sleep(Duration::from_millis(1000)).await;
        info!("‚úÖ Performance - Optimale");
        Ok(())
    }
    
    pub async fn start_monitoring(&self) -> Result<()> {
        info!("üìä D√©marrage du monitoring en temps r√©el");
        
        // Ici, d√©marrer le monitoring r√©el
        loop {
            sleep(Duration::from_secs(1)).await;
            // Monitoring logic here
        }
    }
    
    pub async fn interactive_config(&self) -> Result<()> {
        info!("‚öôÔ∏è Configuration interactive");
        println!("Configuration interactive non encore impl√©ment√©e");
        Ok(())
    }
    
    pub async fn show_stats(&self, period: &str) -> Result<()> {
        info!("üìà Affichage des statistiques: {}", period);
        
        println!("üìä STATISTIQUES - {}", period.to_uppercase());
        println!("üì§ Emails envoy√©s: {}", self.stats.total_sent);
        println!("‚úÖ Emails d√©livr√©s: {}", self.stats.total_delivered);
        println!("‚ùå Emails rebondis: {}", self.stats.total_bounced);
        println!("üëÅÔ∏è Emails ouverts: {}", self.stats.total_opened);
        println!("üñ±Ô∏è Emails cliqu√©s: {}", self.stats.total_clicked);
        
        Ok(())
    }
}