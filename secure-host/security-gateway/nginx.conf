# CONFIGURATION NGINX ULTRA-SÉCURISÉE
# Conçue pour être invisible aux scanners

user nginx-sec;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /tmp/nginx.pid;

# Optimisations de performance et sécurité
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    # Cacher la version de Nginx
    server_tokens off;
    
    # Headers de sécurité
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always;
    
    # Supprimer les headers révélateurs
    more_clear_headers 'Server';
    more_clear_headers 'X-Powered-By';
    more_clear_headers 'X-AspNet-Version';
    more_clear_headers 'X-AspNetMvc-Version';
    
    # Configuration de base
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging sécurisé (sans IPs sensibles)
    log_format secure_log '$remote_addr_anon - $remote_user [$time_local] '
                         '"$request" $status $body_bytes_sent '
                         '"$http_referer" "$http_user_agent"';
    
    access_log /var/log/nginx/access.log secure_log;
    
    # Optimisations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Limites de sécurité
    client_max_body_size 10M;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # Timeouts de sécurité
    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout 15;
    send_timeout 10;
    
    # Rate limiting global
    limit_req_zone $binary_remote_addr zone=global:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # GeoIP pour bloquer certains pays
    geoip_country /usr/share/GeoIP/GeoIP.dat;
    map $geoip_country_code $allowed_country {
        default yes;
        CN no;  # Chine
        RU no;  # Russie
        KP no;  # Corée du Nord
        IR no;  # Iran
    }
    
    # Détection de bots avancée
    map $http_user_agent $bot_detected {
        default 0;
        ~*bot 1;
        ~*crawler 1;
        ~*spider 1;
        ~*scraper 1;
        ~*wget 1;
        ~*curl 1;
        ~*python 1;
        ~*java 1;
        ~*go-http 1;
        ~*scanner 1;
        ~*exploit 1;
        ~*hack 1;
        ~*nmap 1;
        ~*nikto 1;
        ~*sqlmap 1;
        ~*masscan 1;
        ~*zap 1;
    }
    
    # Détection de scan de ports
    map $request_uri $port_scan {
        default 0;
        ~*/admin 1;
        ~*/wp-admin 1;
        ~*/phpmyadmin 1;
        ~*/administrator 1;
        ~*/.env 1;
        ~*/config.php 1;
        ~*/backup 1;
        ~*/test 1;
        ~*/debug 1;
    }
    
    # Upstream vers le serveur web interne
    upstream web_backend {
        server web-server:8080;
        keepalive 32;
    }
    
    # Serveur principal (HTTPS uniquement)
    server {
        listen 443 ssl http2;
        server_name _;
        
        # Configuration SSL/TLS ultra-sécurisée
        ssl_certificate /etc/ssl/certs/server.crt;
        ssl_certificate_key /etc/ssl/certs/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # Headers de sécurité HSTS
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        
        # Blocages de sécurité
        if ($bot_detected = 1) {
            return 444;  # Fermeture silencieuse
        }
        
        if ($port_scan = 1) {
            return 444;
        }
        
        if ($allowed_country = no) {
            return 444;
        }
        
        # Rate limiting
        limit_req zone=global burst=20 nodelay;
        limit_conn conn_limit_per_ip 10;
        
        # Endpoint de santé (caché)
        location /health {
            access_log off;
            return 200 "OK";
            add_header Content-Type text/plain;
        }
        
        # Honeypot pour les scanners
        location ~ ^/(admin|wp-admin|phpmyadmin|administrator|backup|config|test|debug) {
            access_log /var/log/nginx/honeypot.log;
            return 444;
        }
        
        # Bloquer les extensions dangereuses
        location ~* \.(php|asp|aspx|jsp|cgi|pl)$ {
            return 444;
        }
        
        # Proxy vers le backend sécurisé
        location / {
            # Headers de proxy sécurisés
            proxy_pass http://web_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Buffers
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }
        
        # Gestion des erreurs personnalisée
        error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 /error.html;
        error_page 500 501 502 503 504 505 506 507 508 510 511 /error.html;
        
        location = /error.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
    
    # Redirection HTTP vers HTTPS
    server {
        listen 80;
        server_name _;
        return 301 https://$host$request_uri;
    }
    
    # Serveur par défaut pour les requêtes non matchées
    server {
        listen 80 default_server;
        listen 443 default_server ssl;
        server_name _;
        ssl_certificate /etc/ssl/certs/server.crt;
        ssl_certificate_key /etc/ssl/certs/server.key;
        return 444;  # Fermeture silencieuse
    }
}