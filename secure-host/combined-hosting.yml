# HÉBERGEUR COMPLET + PROTECTION ULTIME
# Héberge votre site ET le protège à 100%

version: '3.8'

services:
  # 1. VOTRE SITE WEB (Hébergement complet)
  web-hosting:
    build: ./web-hosting
    container_name: secure-web-host
    environment:
      - NODE_ENV=production
      - DOMAIN=${DOMAIN:-localhost}
      - SSL_ENABLED=true
    volumes:
      - ./website:/var/www/html:rw
      - ./uploads:/var/www/html/uploads:rw
      - web-data:/app/data:rw
      - ./logs:/var/log/web:rw
    networks:
      - internal
    restart: unless-stopped
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
    user: "1000:1000"

  # 2. BASE DE DONNÉES SÉCURISÉE
  secure-database:
    image: postgres:15-alpine
    container_name: secure-db
    environment:
      - POSTGRES_DB=${DB_NAME:-website}
      - POSTGRES_USER=${DB_USER:-webuser}
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db-backups:/backups:rw
      - ./db-init:/docker-entrypoint-initdb.d:ro
    networks:
      - internal
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    secrets:
      - db_password
    command: >
      postgres
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/server.crt
      -c ssl_key_file=/var/lib/postgresql/server.key

  # 3. CACHE REDIS SÉCURISÉ
  secure-cache:
    image: redis:7-alpine
    container_name: secure-redis
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - internal
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    secrets:
      - redis_password
    command: redis-server /usr/local/etc/redis/redis.conf

  # 4. GESTIONNAIRE DE FICHIERS SÉCURISÉ
  file-manager:
    build: ./file-manager
    container_name: secure-files
    environment:
      - UPLOAD_MAX_SIZE=100M
      - ALLOWED_EXTENSIONS=jpg,jpeg,png,gif,pdf,doc,docx
      - ANTIVIRUS_ENABLED=true
    volumes:
      - ./uploads:/uploads:rw
      - ./website/assets:/assets:rw
    networks:
      - internal
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true

  # 5. SYSTÈME DE SAUVEGARDE AUTOMATIQUE
  backup-system:
    build: ./backup
    container_name: secure-backup
    environment:
      - BACKUP_INTERVAL=3600
      - RETENTION_DAYS=30
      - ENCRYPT_BACKUPS=true
      - S3_BUCKET=${BACKUP_BUCKET:-}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-}
    volumes:
      - ./website:/source/website:ro
      - db-data:/source/database:ro
      - ./backups:/backups:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - internal
      - backup-net
    restart: unless-stopped
    cap_drop:
      - ALL

  # 6. SECURITY GATEWAY (Protection totale)
  security-gateway:
    build: ./security-gateway
    container_name: ultra-security
    ports:
      - "443:443"
      - "80:80"
    environment:
      - STEALTH_MODE=maximum
      - BOT_PROTECTION=ultimate
      - RATE_LIMIT=strict
      - GEO_BLOCKING=true
      - AI_DETECTION=true
    volumes:
      - ./certs:/etc/ssl/certs:ro
      - ./logs:/var/log/security:rw
      - ./geoip:/usr/share/GeoIP:ro
    networks:
      - dmz
      - internal
    restart: unless-stopped
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges:true
    depends_on:
      - web-hosting

  # 7. PIA PROXY ROTATION
  pia-rotator:
    build: ./pia-proxy
    container_name: pia-rotation
    environment:
      - PIA_USERNAME=${PIA_USERNAME}
      - PIA_PASSWORD=${PIA_PASSWORD}
      - ROTATION_INTERVAL=300
      - COUNTRIES=US,CA,GB,DE,FR,NL,SE,CH
      - AUTO_ROTATE=true
    volumes:
      - ./logs:/var/log/pia:rw
    networks:
      - vpn-net
      - internal
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    privileged: true

  # 8. SMART FIREWALL
  smart-firewall:
    build: ./firewall
    container_name: intelligent-firewall
    network_mode: host
    privileged: true
    environment:
      - PROTECTION_LEVEL=maximum
      - AUTO_BAN=true
      - HONEYPOT_ENABLED=true
      - ML_DETECTION=true
    volumes:
      - ./firewall-rules:/etc/firewall:ro
      - ./logs:/var/log/firewall:rw
    restart: unless-stopped

  # 9. MONITORING ET ALERTES
  security-monitor:
    build: ./monitoring
    container_name: security-watch
    environment:
      - ALERT_EMAIL=${ALERT_EMAIL}
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - TELEGRAM_CHAT=${TELEGRAM_CHAT}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - MONITORING_INTERVAL=30
    volumes:
      - ./logs:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring
    restart: unless-stopped
    cap_drop:
      - ALL

  # 10. ADMIN PANEL SÉCURISÉ
  admin-panel:
    build: ./admin
    container_name: secure-admin
    environment:
      - ADMIN_USERNAME=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD_FILE=/run/secrets/admin_password
      - SESSION_TIMEOUT=1800
      - 2FA_ENABLED=true
    volumes:
      - ./logs:/logs:ro
      - ./config:/config:rw
    networks:
      - internal
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    secrets:
      - admin_password
    expose:
      - "8888"

  # 11. SSL/TLS AUTOMATIQUE
  ssl-manager:
    image: certbot/certbot
    container_name: ssl-auto
    environment:
      - DOMAIN=${DOMAIN}
      - EMAIL=${SSL_EMAIL}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_TOKEN:-}
    volumes:
      - ./certs:/etc/letsencrypt:rw
      - ./acme-challenge:/var/www/certbot:rw
    networks:
      - internal
    restart: "no"
    command: >
      sh -c "while :; do
        certbot renew --webroot --webroot-path=/var/www/certbot --quiet;
        sleep 86400;
      done"

# RÉSEAUX SÉCURISÉS
networks:
  dmz:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/24
  monitoring:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/24
  vpn-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/24
  backup-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.24.0.0/24

# VOLUMES SÉCURISÉS
volumes:
  web-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/web
  db-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/database
  redis-data:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs

# SECRETS
secrets:
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  admin_password:
    file: ./secrets/admin_password.txt